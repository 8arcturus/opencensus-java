description = 'OpenCensus Examples'

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.13'
        classpath "gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.6"
    }
}

apply plugin: "checkstyle"
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'findbugs'
// Plugins that require java8
if (JavaVersion.current().isJava8Compatible()) {
    apply plugin: "net.ltgt.errorprone"
    apply plugin: 'com.github.sherter.google-java-format'
}

repositories {
    mavenCentral()
    mavenLocal()
}

group = "io.opencensus"
version = "0.11.0-SNAPSHOT"

compileJava {
    // We suppress the "processing" warning as suggested in
    // https://groups.google.com/forum/#!topic/bazel-discuss/_R3A9TJSoPM
    it.options.compilerArgs += ["-Xlint:all", "-Xlint:-try", "-Xlint:-processing"]
    if (JavaVersion.current().isJava8Compatible()) {
        it.options.compilerArgs += ["-XepDisableWarningsInGeneratedCode"]
        // TODO(bdrutu): Read files directly instead of reading from properties.
        if (rootProject.hasProperty("errorProneWarnings")) {
            it.options.compilerArgs += rootProject.properties["errorProneWarnings"].split(',').collect {
                it as String
            }
        }
        if (rootProject.hasProperty("errorProneExperimentalErrors")) {
            it.options.compilerArgs += rootProject.properties["errorProneExperimentalErrors"].split(',').collect {
                it as String
            }
        }
        if (rootProject.hasProperty("errorProneExperimentalWarnings")) {
            it.options.compilerArgs += rootProject.properties["errorProneExperimentalWarnings"].split(',').collect {
                it as String
            }
        }
        if (rootProject.hasProperty("errorProneExperimentalSuggestions")) {
            it.options.compilerArgs += rootProject.properties["errorProneExperimentalSuggestions"].split(',').collect {
                it as String
            }
        }
    }
    it.options.encoding = "UTF-8"
    // TODO(bdrutu): Enable when fix the issue with configuring bootstrap class.
    // [options] bootstrap class path not set in conjunction with -source 1.6
    if (JavaVersion.current().isJava8Compatible()) {
        it.options.compilerArgs += ["-Werror"]
    }
}

ext {
    findBugsVersion = '3.0.1'
}

findbugs {
    toolVersion = findBugsVersion
    ignoreFailures = false   // bug free or it doesn't ship!
    effort = 'max'
    reportLevel = 'low'      // low = sensitive to even minor mistakes
    omitVisitors = []        // bugs that we want to ignore
}
// Generate html report for findbugs.
findbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
// Disable findbugs for tests.
findbugsTest.enabled = false

checkstyle {
    configFile = file("$rootDir/../buildscripts/checkstyle.xml")
    toolVersion = "8.0"
    ignoreFailures = false
    if (rootProject.hasProperty("checkstyle.ignoreFailures")) {
        ignoreFailures = rootProject.properties["checkstyle.ignoreFailures"].toBoolean()
    }
    configProperties["rootDir"] = file("$rootDir/../")
}

// Disable checkstyle if no java8.
checkstyleMain.enabled = JavaVersion.current().isJava8Compatible()
checkstyleTest.enabled = JavaVersion.current().isJava8Compatible()

// Google formatter works only on java8.
if (JavaVersion.current().isJava8Compatible()) {
    googleJavaFormat {
        toolVersion '1.5'
    }
}

tasks.withType(JavaCompile) {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

dependencies {
    compile "io.opencensus:opencensus-api:${version}",
            "io.opencensus:opencensus-contrib-zpages:${version}",
            "io.opencensus:opencensus-exporter-trace-logging:${version}"

    runtime "io.opencensus:opencensus-impl:${version}"
}

// Provide convenience executables for trying out the examples.
apply plugin: 'application'

startScripts.enabled = false

task statsRunner(type: CreateStartScripts) {
    mainClassName = 'io.opencensus.examples.stats.StatsRunner'
    applicationName = 'StatsRunner'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

task multiSpansTracing(type: CreateStartScripts) {
    mainClassName = 'io.opencensus.examples.trace.MultiSpansTracing'
    applicationName = 'MultiSpansTracing'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

task multiSpansScopedTracing(type: CreateStartScripts) {
    mainClassName = 'io.opencensus.examples.trace.MultiSpansScopedTracing'
    applicationName = 'MultiSpansScopedTracing'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

task multiSpansContextTracing(type: CreateStartScripts) {
    mainClassName = 'io.opencensus.examples.trace.MultiSpansContextTracing'
    applicationName = 'MultiSpansContextTracing'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

task zPagesTester(type: CreateStartScripts) {
    mainClassName = 'io.opencensus.examples.zpages.ZPagesTester'
    applicationName = 'ZPagesTester'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

applicationDistribution.into('bin') {
    from(multiSpansTracing)
    from(multiSpansScopedTracing)
    from(multiSpansContextTracing)
    from(statsRunner)
    from(zPagesTester)
    fileMode = 0755
}
